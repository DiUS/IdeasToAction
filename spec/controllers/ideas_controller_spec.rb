require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe IdeasController do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # IdeasController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe 'GET index' do
    it 'gets nothing without params' do
      get :index, {:format => 'json'}, valid_session
      response.body.should be_blank
      response.should be_success
    end

    it 'gets events when mix is set to true' do
      get :index, {:format => 'json', :mix => 'true'}, valid_session
      response.body.should_not be_blank
      response.should be_success
      assigns(:idea_view).should_not be_nil
    end

    describe 'excluding certain ideas' do
      let(:idea_ids) { '1,2,3,4,5' }
      let(:ideas)   { ['idea1', 'idea2'] }
      let(:excluded_ideas) { mock('excluded_ideas') }

      before do
        Idea.should_receive(:excluding_ideas).with(idea_ids.split(',')).and_return(excluded_ideas)
        excluded_ideas.should_receive(:random).with(5).and_return(ideas)
        get :index, {:format => 'json', :excluding => idea_ids}, valid_session
      end

      it 'gets ideas excluding the list provided in the params' do
        response.body.should eql ideas.to_json
        response.should be_success
      end
    end
  end

  describe 'GET show' do
    let(:idea) { mock_model Idea }
    let(:member) { mock_model Member }
		let(:idea_actions) { [mock_model(IdeaAction)] }
    let(:params) { {:id => 1} }

    before do
      controller.stub(:member).and_return member
      Idea.should_receive(:find).and_return idea
			idea.stub(:idea_actions).and_return idea_actions

			get :show, params.merge(:format => :html), valid_session
		end

		it 'should be successful' do
			expect(response).to be_success
		end

    it 'renders a open in app layout when showing via html' do
      expect(controller).to render_template(:open_in_app)
    end

    it 'assigns the requested idea as @idea' do
      expect(assigns(:idea)).to eq(idea)
		end

		it 'assigns the sorted actions list as @sorted_idea_actions' do
			expect(assigns(:sorted_idea_actions)).to eq(idea_actions)
		end
  end

  describe 'PUT update' do
    let(:idea) { Idea.first }
    let(:attrs) { { :description => 'a description' } }

    let(:admin_member) { Member.create!(:email => 'ted@x.com', :password => 'admin', :role => Member::ROLE_CONTENT_ADMIN) }

    before do
      controller.stub(:current_member).and_return(admin_member)
    end

    before do
      attrs[:idea_actions] = [IdeaAction.last.as_json, IdeaAction.first.as_json]
      attrs[:tags] = [Tag.last.as_json, Tag.first.as_json]
      attrs[:talks] = [Talk.last.as_json, Talk.first.as_json]
    end

    it 'should update the idea' do
      put :update, { :id => idea.id, :idea => attrs, :format => :json }, valid_session
      puts response.body unless response.success?
      response.should be_success
    end
  end

  describe "POST create" do
    let(:talk) { Talk.first }
    let(:valid_attributes) { 
      { 
        description: 'Body language affects how others see us, but it may also change how we see ourselves.',
        talks: [
          talk.as_json
        ],
        idea_actions: [
          { description: 'Examine your own body language in different social situations.', target_date: Time.now + 1.day },
        ]
      }
    }

    describe "with valid params" do
			before do
				controller.stub(:member).and_return(Member.first)
				controller.stub(:current_member).and_return(Member.first)
			end

      it "creates a new idea" do
        expect {
          post :create, { :format => 'json', :idea => valid_attributes}, valid_session
        }.to change(Idea, :count).by(1)
      end

      it "assigns a newly created idea as @idea" do
        post :create, { :format => 'json', :idea => valid_attributes}, valid_session
        assigns(:idea).should be_a(Idea)
        assigns(:idea).should be_persisted
      end

      it "assigns the member to the idea" do
        post :create, { :format => 'json', :idea => valid_attributes}, valid_session
        assigns(:idea).member.should be_a(Member)
      end

      it "should link it up to the ideas listed" do
        post :create, { :format => 'json', :idea => valid_attributes}, valid_session
        assigns(:idea).talks.should include(talk)
      end

      it "adds subordinate action entities" do
        post :create, { :format => 'json', :idea => valid_attributes}, valid_session
        assigns(:idea).idea_actions.first.should be_a(IdeaAction)
      end

      it "return the json of the created idea" do
        post :create, { :format => 'json', :idea => valid_attributes}, valid_session
        idea_json = JSON.parse(response.body)
        idea_json['description'].should eq valid_attributes[:description]
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved idea as @idea" do
        # Trigger the behavior that occurs when invalid params are submitted
        Idea.any_instance.stub(:save).and_return(false)
        post :create, { :format => 'json', :idea => { "description" => "invalid value" }}, valid_session
        assigns(:idea).should be_a_new(Idea)
      end

    end
  end

  describe 'GET random' do
    it 'gets recent ideas' do
      idea = Idea.featured.first
      Idea.stub_chain(:featured, :random).and_return [idea]
      get :random, { :format => :json }
      response.body.should eql idea.to_json
    end
  end
end